MatrixTracetransform    ->  ParseMappingTask
                        ->  CollectDirectoryInputTask
                        ->  MethodCollector.collect //收集需要插桩的方法信息, 每个插桩信息封装成TraceMethod对象
                            ->  CollectSrcTask.run {
                                    ClassReader classReader = new ClassReader()
                                    ClassWriter classWriter = new ClassWriter()
                                    ClassVisitor visitor = new TraceClassAdapter()
                                    classReader.accept(visitor)
                                }
                            ->  TraceClassAdapter.visitMethod
                            ->  new CollectMethodNode(cv.visitMethod)
                            ->  CollectMethodNode.visitEnd {
                                    collectedMethodMap.put(traceMethod.getMethodName(), traceMethod);
                                }
                        ->  MethodTracer.trace
                            ->  MethodTracer.traceMethodFromSrc
                            ->  MethodTracer.innerTraceMethodFromSrc
                            ->  ClassVisitor classVisitor = new TraceClassAdapter(Opcodes.AS



TraceClassAdapter extends ClassVisitor {
    visit() {}
    visitMethod() {
        MethodVisitor mv = cv.visitMethod()
        new TraceMethodAdapter(mv)
    }
}

TraceMethodAdapter extends AdviceAdapter {
    init() {
        TraceMethod traceMethod = TraceMethod.create()
    }
    onMethodEnter () {}
    onMethodExit() {}
}

CollectMethodNode extends MethodNode {

}


getCollectedMethodMap()


MethodCollector {
    private class TraceClassAdapter extends ClassVisitor {}
}
MethodTracer {
    private class TraceClassAdapter extends ClassVisitor {}
}
